global:
  oauth2:
    base-uri: /oauth2/authorization #FE 소셜로그인 요청할 때 사용할 주소값
    # 플랫폼과 통신을 3번 정도 하는데 각 통신들이 하나의 작업을 위한 트랜잭션이라는 것을
    # 연결시키기 위해 쿠키를 사용한다.
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:8080/fe/redirect
      - http://${DOMAIN.SERVER.PATH2}/fe/redirect
      - http://${DOMAIN.SERVER.PATH2}0/fe/redirect
      - http://${DOMAIN.SERVER.PATH}/fe/redirect
      - http://${DOMAIN.SERVER.PATH}0/fe/redirect
      - http://localhost:5173/fe/redirect

youtube:
  api:
    key: ${YOUTUBE.API_KEY}

weather:
  api:
    key: ${WEATHER.API_KEY}

upstage:
  api:
    key: ${UPSTAGE.API_KEY}

const:
  default-page-size: 20
  auth-code-length: 6

file:
  directory: D:/pjh/3rd-Project/jobdone

domain:
  path:
    server: job-done.r-e.kr:5234
    server2: ${DOMAIN.SERVER.PATH2}

mybatis:
  mapper-locations: mappers/**/*.xml

kakao:
  map:
    api-key: 5d58f74383aea3ac7b020083d8c08607

kakaopay:
  secretKey: ${KAKAO.PAY.SECRET}
  cid: TC0ONETIME

jwt-const:
  issuer: green@green.kr
  secret: ${JWT_SECRET_KEY}
  header-schema-name: Authorization
  claim-key: signedUser
  token-name: JWT
  token-type: Bearer
  access-token-expiry: 600_000_000 #10분(MS)
  refresh-token-expiry: 1_296_000_000 #15일(MS)
  refresh-token-cookie-name: refresh-token
  refresh-token-cookie-expiry: 1_296_000 #15일 (S)



spring:
  application:
    name: Jobone
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: jdbc:log4jdbc:mariadb://${DEFAULT.DB_URL}?serverTimezone=Asia/Seoul
    username: ${DEFAULT.USERNAME}
    password: ${DEFAULT.PASSWORD}
    hikari:
      data-source-properties:
        serverTimezone: Asia/Seoul
  servlet:
    multipart:
      max-file-size: 15MB

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-name: Kakao
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post #client-id, client-secret 쿼리스트링으로 날아가야 한다.
            authorization-grant-type: authorization_code #권한부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
              # baseUrl: 서버가 돌아가고 있는 host
            # action: login
            # registrationId: kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email

          naver:
            client-name: Naver
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post #client-id, client-secret 쿼리스트링으로 날아가야 한다.
            authorization-grant-type: authorization_code #권한부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # baseUrl: 서버가 돌아가고 있는 host
            # action: login
            # registrationId: naver
            scope:
              - name
              - image
              - profile_image
              - nickname
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #kakao 인증처리 URL
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header
            #default값이 header AccessToken 어디에 담아서 보낼지 설정(header, form, querry)
            user-name-attribute: id #유일값 속성명
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #naver 인증처리 URL
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response #유일값 속성명

  jpa:
    database: mysql
    hibernate:
      #ddl-auto: create #entity를 서버 기동때마다 drop 후 create 한다.
      ddl-auto: update #entity가 없으면 create, 기존 존재하는 entity는 컬럼을 새롭게 추가하는 것만 반영
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
#        physical_naming_strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        jdbc:
          batch_size: 50
        format_sql: true
        order_updates: true
        time_zone: Asia/Seoul
    show-sql: true


springdoc:
  swagger-ui:
    default-model-expand-depth: 10
    display-request-duration: true
    groups-order: asc
    operations-sorter: method
    path: /swagger
    tags-sorter: alpha
  cache:
    disabled: true


mail:
  host: smtp.gmail.com
  port: 587
  username: "tlaqhdbs12@gmail.com"
  password: "uxds thkj vsvs clpv"
  properties:
    mail:
      smtp:
        auth: true
        starttls:
          enable: true
          required: true
        connectiontimeout: 5000
        timeout: 5000
        writetimeout: 5000
  auth-code-expiration-millis: 1800000

server:
  forward-headers-strategy: native