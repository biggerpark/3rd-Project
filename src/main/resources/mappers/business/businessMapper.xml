<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.jobdone.business.BusinessMapper">

    <insert id="insBusiness" useGeneratedKeys="true" keyProperty="businessId">
        INSERT INTO business
        SET
        paper = #{paper},
        userId = #{userId},
        businessNum = #{businessNum},
        businessName = #{businessName},
        address = #{address},
        detailTypeId = #{detailTypeId},
        busiCreatedAt = #{busiCreatedAt},
        tel = #{tel},
        tel2 = #{tel2},
        tel3 = #{tel3}
    </insert>

    <select id="existBusinessNum" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM business
        WHERE businessNum = #{businessNum}
    </select>

    <update id="udtBusiness">
        UPDATE business
        <set>
            <if test=" title != null and title != ''">
                title = #{title}
            </if>
            <if test=" title != null and title != ''">
                ,contents = #{contents}
            </if>
            <if test="closeTime != null and closeTime != ''">
                ,closeTime = #{closeTime}
            </if>
            <if test="openTime != null and openTime != ''">
                ,openTime = #{openTime}
            </if>
        </set>
        WHERE businessId = #{businessId} and userId = #{userId}
    </update>

    <insert id="insBusinessPic" useGeneratedKeys="true" keyProperty="businessPicId">
        insert into business_pic
        (businessId, pic)
        values
        <foreach collection="pics" item="pic" open="(" close=")" separator="),(">
            #{businessId}, #{pic}
        </foreach>
    </insert>
    <select id="existBusinessPhone" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM business_phone
        WHERE businessId = #{businessId} AND phone = #{phone}
    </select>

    <insert id="insBusinessPhone">
        insert into business_phone
        set businessId = #{businessId},
        phone = #{phone}
    </insert>

    <update id="putBusinessPic">
        update business_pic
        set state = 1
        where businessId = #{businessId}
    </update>

    <update id="udtBusinessState">
        update business
        set state = #{state}
        where businessId = #{businessId}
    </update>

    <update id="udtBusinessLogo">
        update business

       set  logo = #{logo}

        where businessId = #{businessId}
    </update>
    <update id="udtBusinessPaper">
        update business

       set paper = #{paper}

        where businessId = #{businessId}
    </update>

    <select id="selAllBusiness">
        SELECT c.pic,d.detailTypeName, b.businessId, b.businessName, b.title, p.price AS price
        , ROUND(AVG(r.score),2)AS scoreAvg, IF(l.userId IS null,0,1)AS `like`,COUNT(r.reviewId) AS reviewCount
        FROM business b
        left join detail_type d
        on  d.detailTypeId = b.detailTypeId
        left join category k
        on k.categoryId = d.categoryId
        left JOIN business_pic c
        ON c.businessId = b.businessId
        left JOIN product p
        ON b.businessId = p.businessId
        JOIN service s
        ON s.productId = p.productId
        JOIN review r
        ON r.serviceId =s.serviceId
        left JOIN `like` l
        ON l.businessId = b.businessId
        AND l.userId = #{signedUserId}
        WHERE
        (#{categoryId} IS null OR k.categoryId = #{categoryId})
        AND (#{detailTypeId} IS null OR d.detailTypeId = #{detailTypeId})
        GROUP BY
        b.businessId, b.businessName, d.detailTypeName

    </select>


    <select id="selOneBusiness">
        SELECT
        c.pic,
        b.detailTypeId,
        d.detailTypeName,
        b.logo,
        b.businessId,
        b.businessName,
        b.title,
        p.price AS price,
        ROUND(AVG(r.score), 2) AS scoreAvg,
        IF(l.userId IS NULL, 0, 1) AS `like`,
        b.address,
        COUNT(s.productId) AS serviceCount,
        -- openingTime과 closingTime에서 초를 00으로 설정하여 시:분 형태로 출력
        DATE_FORMAT(b.openingTime, '%H:%i') AS openingTime,
        DATE_FORMAT(b.closingTime, '%H:%i') AS closingTime,
        b.busiCreatedAt,
        b.contents,
        COUNT(r.reviewId) AS reviewCount,
        <!-- trunc ( ( sysdate - b.createdAt ) + 1 ) / 365 ) as years-->
        b.tel,
        b.tel2,
        b.tel3
        FROM business b
        JOIN detail_type d ON d.detailTypeId = b.detailTypeId
        LEFT JOIN business_pic c ON c.businessId = b.businessId
        LEFT JOIN product p ON b.businessId = p.businessId
        LEFT JOIN service s ON s.productId = p.productId
        LEFT JOIN review r ON r.serviceId = s.serviceId
        JOIN `like` l ON l.businessId = b.businessId AND l.userId = #{signedUserId}
        WHERE b.businessId = #{businessId}
        GROUP BY b.businessId, b.businessName
    </select>

    <select id="getBusinessPicList">
        select p.businessPicId, p.pic
        from business_pic p
        where p.businessId = #{businessId}
    </select>


</mapper>