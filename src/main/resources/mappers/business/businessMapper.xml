<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.jobdone.business.BusinessMapper">

    <insert id="insBusiness" useGeneratedKeys="true" keyProperty="businessId">
        INSERT INTO business
        SET
        paper = #{paper},
        logo = #{logo},
        userId = #{signedUserId},
        businessNum = #{businessNum},
        businessName = #{businessName},
        address = #{address},
        detailTypeId = #{detailTypeId},
        busiCreatedAt = #{busiCreatedAt},
        tel = #{tel},
        safeTel = #{safeTel},
        lat = #{lat},
        lng = #{lng}
    </insert>

    <select id="existBusinessNum" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM business
        WHERE businessNum = #{businessNum}
    </select>

    <select id="existBusinessId" parameterType="long" resultType="long">
        SELECT b.userId
        FROM business b
        WHERE b.businessId = #{businessId}
    </select>

    <update id="udtBusiness">
        UPDATE business
        <set>

            <if test="closingTime != null and closingTime != ''">
                ,closingTime = #{closingTime}
            </if>
            <if test="openingTime != null and openingTime != ''">
                ,openingTime = #{openingTime}
            </if>
            <if test="tel != null and tel != ''">
                ,tel = #{tel}
            </if>
        </set>
        WHERE businessId = #{businessId} and userId = #{signedUserId}
    </update>

    <insert id="insBusinessPic" useGeneratedKeys="true" keyProperty="businessPicId">
        insert into business_pic
        (businessId, pic)
        values
        <foreach collection="pics" item="pic" separator=",">
            (#{businessId}, #{pic})
        </foreach>
    </insert>
    <select id="existBusinessPhone" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM business_phone
        WHERE businessId = #{businessId} AND phone = #{phone}
    </select>

    <insert id="insBusinessPhone">
        insert into business_phone
        set businessId = #{businessId},
        phone = #{phone}
    </insert>


    <update id="udtBusinessState">
        update business
        set state = #{state}
        where businessId = #{businessId}
    </update>

    <update id="udtBusinessThumbnail">
        <![CDATA[
        UPDATE business_pic
        SET state = CASE
                       WHEN state = 2 THEN 1
                       WHEN businessPicId = #{businessPicId} AND businessId = #{businessId} THEN 2
                       ELSE state
                    END
        WHERE businessId = #{businessId};
    ]]>
    </update>

    <update id="udtBusinessLogo">
        update business

        set logo = #{logo}

        where businessId = #{businessId}
    </update>

    <update id="udtBusinessPaper">
        update business

        set paper = #{paper}

        where businessId = #{businessId}
    </update>

    <select id="selAllBusiness">

        SELECT
        b.businessId, b.businessName, b.title, b.logo
        , k.categoryId, k.categoryName
        , d.detailTypeId, d.detailTypeName
        , p.price
        , COUNT(distinct s.serviceId) AS serviceCount
        , COUNT(DISTINCT r.reviewId) AS reviewCount
        , ROUND(COALESCE(AVG(r.score), 0), 2) AS scoreAvg
<!--        ,   CASE-->
<!--            WHEN l.userId IS NULL THEN 0-->
<!--            ELSE 1-->
<!--            as like-->
        , IFNULL(l.userId,0) as 'like'
        , g.regionId, g.region
        , c.pic
        , b.lat, b.lng
        , ROUND(6371000 * ACOS(COS(RADIANS(#{userLat})) * COS(RADIANS(b.lat)) * COS(RADIANS(b.lng) -
        RADIANS(#{userLng})) + SIN(RADIANS(#{userLat})) * SIN(RADIANS(b.lat)))) AS distance

        FROM business b
        LEFT JOIN detail_type d
        ON d.detailTypeId= b.detailTypeId
        LEFT JOIN category k
        ON k.categoryId = d.categoryId
        left JOIN product p
        ON b.businessId = p.businessId
        left JOIN service s
        ON s.productId = p.productId
        left JOIN review r
        ON s.serviceId = r.serviceId
        LEFT JOIN `like` l
        ON l.businessId = b.businessId AND l.userId = #{signedUserId}
        LEFT JOIN business_region br
        ON br.businessId = b.businessId
        LEFT JOIN region g
        ON g.regionId = br.regionId
        LEFT JOIN business_pic c
        ON c.businessId = b.businessId AND c.state = 2
<!--        <if test="signedUserId != null">-->
<!--            LEFT JOIN `like` l-->
<!--            ON l.businessId = b.businessId-->
<!--            AND l.userId = #{signedUserId}-->
<!--        </if>-->
<!--        <if test="signedUserId==null">-->
<!--            LEFT JOIN `like` l-->
<!--            ON l.businessId = b.businessId-->
<!--        </if>-->


        WHERE 1=1
        <if test="regionId != null">
            AND br.regionId = #{regionId}
        </if>
        <if test="categoryId != null">
            AND k.categoryId = #{categoryId}
        </if>
        <if test="detailTypeId != null">
            AND d.detailTypeId = #{detailTypeId}
        </if>
        <if test="searchTerm != null">
            AND b.title like '%${searchTerm}%'
        </if>
        AND P.PRICE !=0
        GROUP BY b.businessId

        <choose>
            <when test="sortType == '최신순'">
                ORDER BY b.busiCreatedAt DESC
            </when>
            <when test="sortType == '인기순'">
                ORDER BY scoreAvg DESC, reviewCount DESC
            </when>
            <when test="sortType == '주문순'">
                ORDER BY serviceCount DESC
            </when>
            <when test="sortType == '저가순'">
                ORDER BY p.price
            </when>
            <when test="sortType == '거리순'">
                ORDER BY distance
            </when>
            <otherwise>
                ORDER BY scoreAvg DESC, reviewCount DESC
            </otherwise>

        </choose>
    </select>


    <select id="selOneBusiness">
        SELECT
        p.productId,
        d.categoryId,
        b.detailTypeId,
        d.detailTypeName,
        b.logo,
        b.businessId,
        b.businessName,
        b.title,
        p.price AS price,
        ROUND(AVG(r.score), 2) AS scoreAvg,
        IF(l.userId IS NULL, 0, 1) AS `like`,
        b.address,
        COUNT(distinct s.serviceId) AS serviceCount,
        DATE_FORMAT(b.openingTime, '%H:%i') AS openingTime,
        DATE_FORMAT(b.closingTime, '%H:%i') AS closingTime,
        b.busiCreatedAt,
        b.contents,
        COUNT(distinct r.reviewId) AS reviewCount,
        TIMESTAMPDIFF(YEAR,b.busiCreatedAt, NOW()) AS years,
        b.safeTel,
        b.tel,
        b.businessNum

        FROM business b
        JOIN detail_type d ON d.detailTypeId = b.detailTypeId
        LEFT JOIN business_pic c ON c.businessId = b.businessId
        LEFT JOIN product p ON b.businessId = p.businessId
        LEFT JOIN service s ON s.productId = p.productId
        LEFT JOIN review r ON r.serviceId = s.serviceId
        left JOIN `like` l ON l.businessId = b.businessId AND l.userId = #{signedUserId}
        WHERE b.businessId = #{businessId}
        GROUP BY b.businessId, b.businessName
    </select>

    <select id="getBusinessPicList">
        select p.businessId, p.businessPicId, p.pic
        from business_pic p
        where p.businessId = #{businessId}
    </select>

    <delete id="delBusinessPic">
        delete from business_pic
        where businessPicId = #{businessPicId}
    </delete>

    <select id="getBusinessPicName">
        select b.pic
        from business_pic b
        where businessPicId = #{businessPicId}
    </select>

    <select id="getBusinessMonthly">

        SELECT
        b.businessName,
        YEAR(s.paidAt) AS year,
        MONTH(s.paidAt) AS month,
        SUM(s.price) AS totalPrice
        FROM service s
        JOIN product p
        ON s.productId = p.productId
        JOIN business b
        ON p.businessId = b.businessId
        WHERE b.businessId = #{businessId}
        GROUP BY s.productId, YEAR(s.paidAt), MONTH(s.paidAt)
        ORDER BY s.productId ,year DESC, month DESC;
    </select>

    <select id="getBusinessRevenueList">

        SELECT
        b.businessName,
        d.detailTypeName,
        SUM(s.price) AS totalRevenue,
        SUM(CASE
        WHEN YEAR(s.paidAt) = YEAR(NOW()) AND MONTH(s.paidAt) = MONTH(NOW())
        THEN s.price
        ELSE 0
        END) AS thisMonthRevenue
        FROM service s
        JOIN product p ON s.productId = p.productId
        JOIN business b ON p.businessId = b.businessId
        JOIN detail_type d ON b.detailTypeId = d.detailTypeId
      GROUP BY b.businessId

    </select>

    <select id="countBusinessServicesList">
        SELECT
        b.businessName,
        d.detailTypeName,
        COUNT(s.serviceId) AS totalServiceCount,
        SUM(
        s.completed >= 7
        AND s.createdAt >= DATE_FORMAT(NOW(), '%Y-%m-01')
        ) AS thisMonthServiceCount
        FROM business b
        JOIN detail_type d ON b.detailTypeId = d.detailTypeId
        JOIN product p ON b.businessId = p.businessId
        LEFT JOIN service s ON s.productId = p.productId
        AND s.completed >= 7
        GROUP BY b.businessName, d.detailTypeName;
    </select>
    <select id="countBusinessServices">

        WITH month_series AS (
        SELECT YEAR(CURDATE()) AS year, MONTH(CURDATE()) AS month
        UNION ALL
        SELECT YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)), MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))
        UNION ALL
        SELECT YEAR(DATE_SUB(CURDATE(), INTERVAL 2 MONTH)), MONTH(DATE_SUB(CURDATE(), INTERVAL 2 MONTH))
        UNION ALL
        SELECT YEAR(DATE_SUB(CURDATE(), INTERVAL 3 MONTH)), MONTH(DATE_SUB(CURDATE(), INTERVAL 3 MONTH))
        UNION ALL
        SELECT YEAR(DATE_SUB(CURDATE(), INTERVAL 4 MONTH)), MONTH(DATE_SUB(CURDATE(), INTERVAL 4 MONTH))
        UNION ALL
        SELECT YEAR(DATE_SUB(CURDATE(), INTERVAL 5 MONTH)), MONTH(DATE_SUB(CURDATE(), INTERVAL 5 MONTH))
        )
        SELECT
        b.businessName,
        ms.year,
        ms.month,
        IFNULL(COUNT(s.serviceId), 0) AS serviceCount
        FROM month_series ms
        CROSS JOIN business b
        LEFT JOIN product p ON b.businessId = p.businessId
        LEFT JOIN service s
        ON s.productId = p.productId
        AND YEAR(s.createdAt) = ms.year
        AND MONTH(s.createdAt) = ms.month
        AND s.completed >= 7
        WHERE b.businessId = #{businessId}
        GROUP BY ms.year, ms.month
        ORDER BY ms.year DESC, ms.month DESC;
    </select>


</mapper>