<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.jobdone.admin.AdminMapper">

    <select id="getBusinessApplication">
        SELECT a.businessId,a.createdAt as applicationCreatedAt,a.paper,b.detailTypeName,c.name as userName,a.businessName,a.state
        FROM business a
        LEFT JOIN detail_type b
        on a.detailTypeId=b.detailTypeId
        LEFT JOIN user c
        on a.userId=c.userId
        ORDER BY a.businessId DESC
        LIMIT 10 OFFSET #{offset}
    </select>

    <select id="getBusinessCategory">
        SELECT a.businessId
        , a.createdAt as applicationCreatedAt
        , a.businessName
        , a.tel
        , c.name as userName
        , b.detailTypeName
        , ROUND(AVG(r.score),2) AS reviewScore
        , COUNT(r.reviewId) AS reviewNumbers
        FROM business a
        LEFT JOIN detail_type b
        ON a.detailTypeId = b.detailTypeId
        LEFT JOIN user c
        ON a.userId = c.userId
        LEFT JOIN product d
        ON a.businessId = d.businessId
        LEFT JOIN service s
        ON d.productId = s.productId
        LEFT JOIN review r
        ON s.serviceId = r.serviceId
        WHERE
        b.categoryId=#{categoryId}
        GROUP BY
        a.businessId, a.businessName, a.tel, c.name, b.detailTypeName
        ORDER BY a.businessId DESC
    </select>

    <select id="getAdminUserInfo">
        WITH latest_service AS (
        SELECT b.userId, d.detailTypeName
        FROM service b
        LEFT JOIN product c ON b.productId = c.productId
        LEFT JOIN detail_type d ON c.detailTypeId = d.detailTypeId
        WHERE b.createdAt = (
        SELECT MAX(b2.createdAt)
        FROM service b2
        WHERE b2.userId = b.userId
        )
        )
        SELECT a.name AS userName,
        a.phone,
        ls.detailTypeName,
        COUNT(b.serviceId) AS serviceNumber,
        a.type as typeName,
        a.userId
        FROM user a
        LEFT JOIN service b ON a.userId = b.userId
        LEFT JOIN latest_service ls ON a.userId = ls.userId
        GROUP BY a.userId, a.name, a.phone, ls.detailTypeName, a.type
        ORDER BY a.userId DESC
        LIMIT 10 OFFSET #{offset}

    </select>

    <select id="getSalesInfo">
        SELECT
        COALESCE(SUM(CASE WHEN d.detailTypeId BETWEEN 1 AND 7 THEN s.price END), 0) AS totalSales,
        COALESCE(SUM(CASE WHEN d.detailTypeId BETWEEN 1 AND 3 THEN s.price END), 0) AS cleaningSales,
        COALESCE(SUM(CASE WHEN d.detailTypeId BETWEEN 4 AND 5 THEN s.price END), 0) AS movingSales,
        COALESCE(SUM(CASE WHEN d.detailTypeId BETWEEN 6 AND 7 THEN s.price END), 0) AS carWashSales
        FROM service s
        JOIN product p ON s.productId = p.productId
        JOIN detail_type d ON p.detailTypeId = d.detailTypeId
        WHERE s.createdAt BETWEEN '${month}-01 00:00:00' AND '${month}-${lastDay} 23:59:59'
    </select>

    <select id="getCategoryInfo">
        SELECT
        COUNT(CASE WHEN b.detailTypeId BETWEEN 1 AND 7 THEN b.businessId END) AS totalCount,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 1 AND 3 THEN b.businessId END) AS cleaningCount,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 1 AND 1 THEN b.businessId END) AS cleaningCount1,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 2 AND 2 THEN b.businessId END) AS cleaningCount2,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 3 AND 3 THEN b.businessId END) AS cleaningCount3,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 4 AND 5 THEN b.businessId END) AS movingCount,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 4 AND 4 THEN b.businessId END) AS movingCount4,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 5 AND 5 THEN b.businessId END) AS movingCount5,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 6 AND 7 THEN b.businessId END) AS carWashCount,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 6 AND 6 THEN b.businessId END) AS carWashCount6,
        COUNT(CASE WHEN b.detailTypeId BETWEEN 7 AND 7 THEN b.businessId END) AS carWashCount7
        FROM business b
    </select>

    <select id="getPaidCount">
        SELECT
        COUNT(CASE WHEN s.paidAt BETWEEN '${beforeMonth}-01 00:00:00' AND '${beforeMonth}-${lastDay} 23:59:59' THEN s.paidAt END) AS pastPaidCount,
        COUNT(CASE WHEN s.paidAt BETWEEN '${targetMonth}-01 00:00:00' AND '${today} 23:59:59' THEN s.paidAt END) AS nowPaidCount
        FROM service s
    </select>
    
    <select id="getRatingAverage">
        SELECT
        AVG(CASE WHEN d.categoryId = 1 THEN r.score END) AS avgScoreCleaning,
        AVG(CASE WHEN d.categoryId = 2 THEN r.score END) AS avgScoreMoving,
        AVG(CASE WHEN d.categoryId = 3 THEN r.score END) AS avgScoreCarWash,
        AVG(r.score) AS totalAvgScore
        FROM review r
        JOIN service s ON r.serviceId = s.serviceId
        JOIN product p ON p.productId = s.productId
        JOIN detail_type d ON d.detailTypeId = p.detailTypeId
        JOIN category c ON c.categoryId = d.categoryId
        WHERE d.categoryId IN (1, 2, 3)
    </select>

    <select id="getUserIncrease">
        SELECT COUNT(u.userId)
        FROM user u
        WHERE u.createdAt BETWEEN '${targetMonth}-01 00:00:00' AND '${today} 23:59:59'
    </select>

    <select id="getNewBusiness">
        SELECT b.businessName, b.createdAt
        FROM business b
        WHERE b.state = 100
        ORDER BY b.createdAt DESC
        LIMIT 3
    </select>

    <select id="getNewServiceCount">
        SELECT
        COUNT(CASE WHEN s.paidAt BETWEEN '${yesterday} 00:00:00' AND '${yesterday} 23:59:59' THEN s.serviceId END) AS yesterdayServiceCount,
        COUNT(CASE WHEN s.paidAt BETWEEN '${today} 00:00:00' AND '${today} 23:59:59' THEN s.serviceId END) AS todayServiceCount
        FROM Service s WHERE s.completed >= 6;
    </select>

</mapper>